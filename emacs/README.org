:PROPERTIES:
:header-args: :results silent :mkdirp yes :eval no
:END:
+title: Peteches Emacs Stuff



* EMACS Config
:PROPERTIES:
:header-args:emacs-lisp: :tangle ~/.config/emacs/init.el
:END:

** Basics

*** Add package things

These will be needed for most of the rest of the config so best set it up first.

#+begin_src emacs-lisp
  (require 'package)
        ;; load emacs 24's package system. Add MELPA repository.
        (require 'package)
        (setq package-archives '(("melpa" . "https://melpa.org/packages/")
         ("org" . "https://orgmode.org/elpa")
         ("elpa" . "https://elpa.gnu.org/packages")))
  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))
  (require 'use-package)
  (setq use-package-always-ensure t)
#+end_src

*** Function to determine platform

Throughout this config I'll need to make descisions based on if it's being used on linux or mac.
#+begin_src emacs-lisp

  (defmacro peteches/sys-exe (type &rest body)
    "Evaluate BODY if `system-type' equals TYPE."
    (declare (indent defun))
    `(when (eq system-type ',type)
       ,@body))
 #+end_src

#+begin_src emacs-lisp
  (peteches/sys-exe gnu/linux
    (message "free beer"))
  (peteches/sys-exe darwin
    (message "Expensive phone"))
#+end_src

*** Tidy up some UI elements
**** fix ugly old school defaults for a minimal look
#+begin_src emacs-lisp
  (setq inhibit-startup-message t)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
#+end_src

**** Allow following version controlled files
#+begin_src emacs-lisp
  (setq vc-follow-symlinks t)
#+end_src

**** setup line numbering everywhere
#+begin_src emacs-lisp
  (global-display-line-numbers-mode 'relative)
  (column-number-mode)
#+end_src

**** except some modes
#+begin_src emacs-lisp
  (dolist (mode '(org-mode-hook
		  term-mode-hook
                  shell-mode-hook
		  eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))

#+end_src

**** Configure a sweet ModeLine

***** Install all icons doom uses
On fist use on after the package is installed you need to run

=M-x nerd-icons-install-fonts=

#+begin_src emacs-lisp
  (use-package nerd-icons
    :ensure t
    :custom
    (nerd-icons-font-family "Symbols Nerd Font Mono"))
#+end_src

#+begin_src emacs-lisp
  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1))
#+end_src


**** which-key
#+begin_src emacs-lisp
  (use-package which-key
    :init (which-key-mode)
    :diminish which-key-mode
    :config
    (setq which-key-idle-delay 0.3))
#+end_src

*** Let's not clutter my init.el with customize stuff

#+begin_src emacs-lisp
  (setq custom-file (locate-user-emacs-file "custom-vars.el"))
  (load custom-file 'noerror 'nomessage)
#+end_src

*** Dired

**** Basics

- Setting dwim allows fancy copying between dired buffers
- Set flags to =ls= to better display files.

#+begin_src emacs-lisp
  (use-package dired
    :ensure nil ; dired is not installable as it's builtin
    :commands (dired dired-jump)
    :config
    (if (executable-find "eza")
  (message "setting insert-directory-program to 'eza'")
  (setq insert-directory-program (executable-find "eza")))
    :custom
    ((dired-dwim-target t)
     (dired-hide-details-hide-symlink-targets t)
     (if (executable-find "eza")
	 (message "setting list regex and eza list switches")
	 (setq
	       directory-listing-before-filename-regexp ".*[0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9] \\([01][0-9]\\|2[0-3]\\):[0-5][0-9] +"
	       dired-listing-switches "--classify --long --all --sort=Name --group-directories-first --time-style=long-iso --no-user"))))
#+end_src

**** Fancy Icons
#+begin_src emacs-lisp
  (use-package all-the-icons-dired
  :hook (dired-mode . all-the-icons-dired-mode))
#+end_src

*** Snippets
Going to try out [[https://github.com/joaotavora/yasnippet][yassnippet]] and see what it's like
#+begin_src emacs-lisp
  (use-package yasnippet
    :ensure t
    :bind ("C-c s" . yas-insert-snippet)
    :custom
    (yas-verbosity 2)
    (yas-wrap-around-region t)
    :config
    (defun company-yasnippet-or-completion ()
      (interactive)
      (let ((yas-fallback-behavior nil))
        (unless (yas-expand)
          (call-interactively #'company-complete-common))))
    (setq yas-snippet-dirs (append yas-snippet-dirs
                                   '(
                                     "~/.config/emacs/snippets"  ;; personal snippets
                                     ))
          yas-triggers-in-field t)
    (yas-reload-all)
    (yas-global-mode)
    :hook (company-mode . (lambda ()
                        (substitute-key-definition 'company-complete-common
                                                   'company-yasnippet-or-completion
                                                   company-active-map)))
  )
#+end_src

*** Aggressive indenting
[[https://github.com/malabarba/aggressive-indent-mode][agressive-indent-mode]] looks like something I would like, so I'm giving it a go
#+begin_src emacs-lisp
  (use-package aggressive-indent
    :ensure t
    :config
    (global-aggressive-indent-mode 1))
#+end_src

*** Setup Theme Stuff
**** Modus theme
#+begin_src emacs-lisp
  (setq global-auto-revert-non-file-buffers t)
  (setq modus-themes-mode-line '(borderless)
	modus-themes-bold-constructs t
	modus-themes-italic-constructs t
	modus-themes-fringes 'subtle
	modus-themes-tabs-accented t
	modus-themes-paren-match '(bold intense)
	modus-themes-prompts '(bold intense)
        modus-themes-completions '(opinionated)
        modus-themes-org-blocks 'tinted-background
        modus-themes-scale-headings t
        modus-themes-region '(bg-only)
        modus-themes-syntax '(alt-syntax faint)
        modus-themes-headings
        '((1 . (rainbow overline background 1.4))
          (2 . (rainbow background 1.3))
          (3 . (rainbow bold 1.2))
          (t . (semilight 1.1))))
#+end_src

**** Setup Doom theme
#+begin_src emacs-lisp
      (use-package doom-themes)
#+end_src

**** Load the theme we want.
#+begin_src emacs-lisp
  (load-theme 'doom-gruvbox t)
#+end_src

*** Setup Ivy completion
**** Install base ivy
#+begin_src emacs-lisp
    (use-package swiper
     :bind (("C-s" . swiper)))
    (use-package ivy
    :diminish
    :bind (:map ivy-minibuffer-map
	   ("TAB" . ivy-alt-done)
	   ("C-l" . ivy-alt-done)
	   ("C-j" . ivy-next-line)
	   ("C-k" . ivy-previous-line)
	   :map ivy-switch-buffer-map
	   ("C-k" . ivy-previous-line)
	   ("C-l" . ivy-done)
	   ("C-d" . ivy-switch-buffer-kill)
	   :map ivy-reverse-i-search-map
	   ("C-k" . ivy-previous-line)
	   ("C-d" . ivy-reverse-i-search-kill))
    :config
    (ivy-mode 1))
#+end_src

**** Add Ivy Rich for richer ivy info
#+begin_src emacs-lisp
  (use-package ivy-rich
    :after counsel
    :init
    (ivy-rich-mode 1))
#+end_src

**** Add counsel
#+begin_src emacs-lisp
(use-package counsel
  :bind (("M-x". counsel-M-x)
         ("C-x b" . counsel-ibuffer)
	 ("C-x C-f". counsel-find-file)
	 :map minibuffer-local-map
	 ("C-r" . Ã§ounsel-minibuffer-history))
  :config
  (setq ivy-initial-inputs-alist nil))
#+end_src

*** Setup Company completion
**** Set up some global modes / settings
#+begin_src emacs-lisp
  (use-package company
    :hook
    (add-hook 'after-init-hook 'global-company-mode)
    :config
    (setq company-minimum-prefix-length 3
          company-tooltip-align-annotations t
          company-tooltip-offset-display 'lines

          company-dabbrev-minimum-length 5
          company-dabbrev-other-buffers t

          company-files-exclusions '(".git/" ".DS_Store")

          company-backends `((company-yasnippet  :with
                                           company-capf
                                           company-dabbrev
                                           company-files
                                           ))
          )
    (with-eval-after-load 'company
      (define-key company-active-map (kbd "RET") nil)
      (define-key company-active-map (kbd "M-RET") #'company-complete-selection))
    (company-mode))
#+end_src

*** Lets use a Helpful package
#+begin_src emacs-lisp
  (use-package helpful
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key)
  )
#+end_src

** Keybindings
*** Install general (A keybinding package)
General allows us to define custom prefixes and easily map all the child mapping within it.

#+begin_src emacs-lisp
(use-package general
  :config
  (general-create-definer peteches/leader-keys
    :keymaps '(normal insert visual emacs)
    :prefix "SPC"
    :global-prefix "C-SPC")
  (peteches/leader-keys
    "t" '(:ignore t :which-key "toggles")
    "tt"'(counsel-load-theme :which-key "Choose Theme")))
#+end_src

*** Use Hydra for additional keybinding shortcuts
Install hydra first
#+begin_src emacs-lisp
(use-package hydra)
#+end_src

**** Text scaling

#+begin_src emacs-lisp
(defhydra hydra-text-scale (:timeout 4)
  "Scale text"
  ("j" text-scale-decrease "Smaller")
  ("k" text-scale-increase "Larger")
  ("f" nil "Finished" :exit t))
 (peteches/leader-keys
   "ts" '(hydra-text-scale/body :which-key "Scale text"))
 #+end_src

** I am EVIL
:PROPERTIES:
:header-args:emacs-lisp: :tangle no
:END:

*** First lets make <Esc> Work like it should :P
#+begin_src emacs-lisp
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+end_src


*** So let's set up some evil mode.
**** Setup a function to disable Evil in some buffers
Not sure why just yet but this hook seems to stop evil-mode working everywhere.
#+begin_src emacs-lisp
;  (defun peteches/evil-hook ()
;    (dolist (mode  '(custom-mode
;		     eshell-mode
;		     git-rebase-mode
;		     erc-mode
;		     term-mode))
;	  (add-to-list 'evil-emacs-state-modes mode)))
#+end_src

**** Now install evil and add evil-hook
#+begin_src emacs-lisp
  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-i-jump nil)
    ; :hook (evil-mode . peteches/evil-hook)
    :config
    (evil-mode 1)
    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)

    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal))
#+end_src

**** Evil Collection set's up a bunch of consistent keybindings across multiple modes.
#+begin_src emacs-lisp
(use-package evil-collection
  :after evil
  :config
  (evil-collection-init))
#+end_src

**** Evil Lion
[[https://github.com/edkolev/evil-lion][evil lion]] is a text alignment plugin, it looks cool so I'm giving it a go.
#+begin_src emacs-lisp
  (use-package evil-lion
    :config
    (evil-lion-mode))
#+end_src

**** Evil Surround
[[https://github.com/emacs-evil/evil-surround][evil surround]] is a port of Tim Pope's surround plugin. I used it extensively in my vimming days and I miss it!
#+begin_src emacs-lisp
  (use-package evil-surround
  :config
  (global-evil-surround-mode 1))
#+end_src

**** Evil commentary
[[https://github.com/linktohack/evil-commentary][Evil commentary]] is a port of Tim Pope's vim-commentart plugin. I used it a lot and want it in emacs.
#+begin_src emacs-lisp
  (use-package evil-commentary
    :config
    (evil-commentary-mode 1))
#+end_src

**** Evil Exchange
[[https://github.com/Dewdrops/evil-exchange][evil exchange]] is  a port of Tom McDonald's vim-exchange, though the default binding has to be changed from =cx= to =gx= for reasons.
#+begin_src emacs-lisp
  (use-package evil-exchange
  :config
  (evil-exchange-install))
#+end_src

** Language Support
*** Globally useful
**** Flycheck
[[https://www.flycheck.org/en/latest/index.html][FlyCheck]] is a modern on-the-fly syntax checking extension for GNU Emacs.
#+begin_src emacs-lisp
  (use-package flycheck
  :init (global-flycheck-mode))
#+end_src
**** Rainbow delimiters
#+begin_src emacs-lisp
    (use-package rainbow-delimiters
	:hook (prog-mode . rainbow-delimiters-mode))
#+end_src
**** LSP Baby Yeah!
***** We'll set up some functions first
****** Add breadcrumbs to LSP buffers:
This sets up a trace of where the point is withing the project.
#+begin_src emacs-lisp
  (defun peteches/lsp-mode-breadcrumbs ()
    (setq lsp-hqeaderline-breadcrumb-segments '(path-up-to-project file symbols))
    (lsp-headerline-breadcrumb-mode))
#+end_src

***** Then wrap them up in a single wrapper hook function
#+begin_src emacs-lisp
  (defun peteches/lsp-mode-settings ()
    (peteches/lsp-mode-breadcrumbs)
    (add-hook 'before-save-hook #'lsp-format-buffer t t)
    (add-hook 'before-save-hook #'lsp-organize-imports t t))
#+end_src

***** Install LSP
#+begin_src emacs-lisp
    (use-package lsp-mode
      :commands lsp lsp-deferred
      :init
        (setq lsp-keymap-prefix "C-c l")
      :config
        (lsp-enable-which-key-integration t)
        :hook
        (
          (go-mode . lsp-mode)
          (go-ts-mode . lsp-mode) ;; for treesitter go mode
          (lsp-mode . peteches/lsp-mode-settings)
        )
    )
  (use-package lsp-ui
    :hook (lsp-mode . lsp-ui-mode)
    :custom
    (lsp-ui-doc-position 'bottom))
#+end_src
**** Add IVY integration to lsp
lsp-ivy integrates Ivy with lsp-mode to make it easy to search for things by name in your code. When you run these commands, a prompt will appear in the minibuffer allowing you to type part of the name of a symbol in your code. Results will be populated in the minibuffer so that you can find what youâre looking for and jump to that location in the code upon selecting the result.

Try these commands with =M-x=:

  - =lsp-ivy-workspace-symbol= - Search for a symbol name in the current project workspace
  - =lsp-ivy-global-workspace-symbol= - Search for a symbol name in all active project workspaces

#+begin_src emacs-lisp
(use-package lsp-ivy)
#+end_src

**** Install DAP mode
#+begin_src emacs-lisp
  (use-package dap-mode
    :config
    (setq dap-print-io t)
    (general-define-key
     :keymaps 'lsp-mode-map
     :prefix lsp-keymap-prefix
     "d" '(dap-hydra t :wk "debugger")))

#+end_src

**** String Inflection
The [[https://github.com/akicho8/string-inflection][String Inflection]] package is useful for cycling through =CamelCase=, =snake_case=, and others.
#+begin_src emacs-lisp
  (use-package string-inflection
    :ensure t
)
#+End_src
*** Docker
I use docker a lot so lets have a docker mode
#+begin_src emacs-lisp
  (use-package dockerfile-mode
  :ensure t)
#+end_src
*** Common Lisp
I want to get better with general lisp dialects so starting with common lisp seems natural
**** Slime
#+begin_src emacs-lisp
  (use-package slime
    :ensure t
    :hook (
	   (lisp-mode . (lambda () (slime-mode t)))
	   (inferior-lisp-mode . (lambda () (slime-mode t)))
	   )
    :config
    (setq inferior-lisp-program "sbcl"))

#+end_src

*** Go
I like Golang so lets set it up
**** Add gobin to path
#+begin_src emacs-lisp
(add-to-list 'exec-path (shell-command-to-string "go env GOBIN | tr -d '\n'"))
#+end_src
**** Install go-mode
#+begin_src emacs-lisp
  (use-package go-mode
    :ensure t
    :after lsp-mode
    :config
    (setq lsp-go-build-flags (vector "--tags=integration")
          lsp-go-analyses '(
                            (nilness . t)
                            )
          lsp-go-use-gofumpt t

          )
    (require 'dap-dlv-go))
#+end_src
**** Treesitter grammer
#+begin_src emacs-lisp
  (push '(go "https://github.com/tree-sitter/tree-sitter-go")
        treesit-language-source-alist)
  (push '(gomod "https://github.com/camdencheek/tree-sitter-go-mod")
        treesit-language-source-alist)
  (push '(go-mode . go-ts-mode)
        major-mode-remap-alist)
#+end_src
*** Elisp
**** Treesitter grammer
#+begin_src emacs-lisp
  (push '(elisp "https://github.com/Wilfred/tree-sitter-elisp")
        treesit-language-source-alist)
  (push '(elisp-mode . elisp-ts-mode)
        major-mode-remap-alist)
#+end_src
*** TreeSitter
**** Add Treesitter configs
#+begin_src emacs-lisp
  (use-package treesit
    :ensure nil
    :config
    (setq treesit-font-lock-level 10)
    (dolist (grammar
             treesit-language-source-alist)
      (unless (treesit-language-available-p (car grammar))
        (treesit-install-language-grammar (car grammar)))))
#+end_src

**** Treesitter configs

***** Golang
:PROPERTIES:
:header-args:emacs-lisp: :tangle ~/.config/emacs/snippets/go-ts-mode/.yas-setup.el
:END:

****** Functions
******* get fieldname
I want to retrieve the name of a struct field from the line the cursor is currently on
#+begin_src emacs-lisp
  (defun go-ts-get-struct-fieldname (&optional p)
    "Uses Treesitter to get fieldname of struct field. if P not set use point."
    (or p (setq p (point)))
    (treesit-node-text
     (treesit-node-child-by-field-name
      (treesit-node-parent (treesit-node-at p))
      "name")))
#+end_src
******* get function return values
#+begin_src emacs-lisp
  (defun go-ts-get-func-node (&optional p)
    "Uses Treesitter to get return Types of a function. If P not set use point."
    (or p (setq p (point)))
    (treesit-parent-until (treesit-node-at p)
                          (lambda(n)
                            (or (string-match-p "function_declaration" (treesit-node-type n))
                                (string-match-p "method_declaration" (treesit-node-type n))))))
#+end_src
*******  Initialise a go type into concrete Zero value
#+begin_src emacs-lisp
  ;; liberated from https://blog.meain.io/2021/intelligent-snippets-treesitter/
  (defun go-ts-initialise-zero-value (type &optional place-num expandError)
    "Return an initialised zero value of type TYPE. if expandError non-nil initialised error will use fmt.Errorf"
    (or place-num (setq place-num 1))
    (if (treesit-node-p type)
        (setq type (treesit-node-text type)))
    (message "testing: %s" type)
    (pcase type
      ("error" (go-ts-initialise-error place-num expandError))
      ("string" (format "\"${%d:str}\"" place-num))
      ("rune" (format "${%d:0}" place-num))
      ("bool" (format "${%d:false}" place-num))
      ("chan" (format "${%d:nil}" place-num))
      ((pred (string-match-p "^int\\(8\\|16\\|32\\|64\\)?$")) (format "${%d:0}" place-num) ; any integer type
      ((pred (string-match-p "^float\\(32\\|64\\)$")) (format "${%d:0.0}" place-num)) ; any float type
      ((pred (string-prefix-p "<-")) (format "${%d:nil}" place-num)) ; channels
      ((pred (string-prefix-p "[")) (format "${%d:nil}" place-num)) ; arrays
      ((pred (string-prefix-p "*")) (format "${%d:nil}" place-num)) ; pointers to things
      ((pred (string-match " ")) nil) ; for situations with return name
      (_ (format "${%d:%s{}}" place-num type)))))
#+end_src
******* Initialise an err
#+begin_src emacs-lisp
  (defun go-ts-initialise-error (&optional place-num expandError)
    "Uses Treesitter to dermine best value of error. place-num is the yas-snippet placeholder If expandError is non-nil fmt.Errorf() is produced"
    (or place-num (setq place-num 1))
    (or p (setq p (point)))
    (let ((parent-node (treesit-parent-until (treesit-node-at p)
                                             (lambda(n)
                                               (string-match-p "if_statement" (treesit-node-type n))))))
    (message "initialising error: %s" (treesit-node-text parent-node))
    (if (or parent-node expandError)
          (format "fmt.Errorf(\"${%d:error detected}: %%w\", ${%d:%s})"
                  place-num
                  (+ place-num)
                  (treesit-node-text (treesit-node-child-by-field-name (treesit-node-child-by-field-name parent-node "condition") "left")))
        "nil")))
#+end_src

******* Get function return types
#+begin_src emacs-lisp
  (defun go-ts-get-initialised-return-types (place-num &optional p expandError)
    "Use Treesitter to turn a functions return values into a snippet with default values.
  PLACE-NUM is the placeholder number to start with.
  If P not set use point.  If EXPANDERROR non-nil fmt.Errorf() will be used."
    (or p (setq p (point)))
    (string-join (remove nil
                         (mapcar (lambda (type)
                                   (funcall 'go-ts-initialise-zero-value type place-num expandError))
                                 (treesit-query-capture (go-ts-get-func-node p)
                                                        go-ts-query-get-func-return-types nil nil t)))
                 ", "))
#+end_src

****** Compiled queries
******* Get function / method return types


#+begin_src emacs-lisp
  (setq go-ts-query-get-func-return-types-str "
    [
            (function_declaration)
            (method_declaration)
    ] result: (_) @type
    [
            (function_declaration)
            (method_declaration)
    ] result: (
            parameter_list (
            parameter_declaration type: (_) @type_list
        )
    )
    ")
  (if (treesit-query-validate 'go go-ts-query-get-func-return-types-str)
      (setq go-ts-query-get-func-return-types (treesit-query-compile 'go go-ts-query-get-func-return-types-str)))
#+end_src

****** Snippet Definitions
******* set parent mode of go-ts-mode
#+begin_src conf :tangle ~/.config/emacs/snippets/go-ts-mode/.yas-parents
  go-mode
#+end_src

******* Struct Tag
#+begin_src conf :tangle ~/.config/emacs/snippets/go-ts-mode/fieldTag
    # -*- mode: snippet -*-
    # name: Struct Field Tag
    # key: tag
    # --
    \`${1:json}:\"${2:$(string-inflection-underscore-function (go-ts-get-struct-fieldname))}\"\`$0
#+end_src

******* func
#+begin_src conf :tangle ~/.config/emacs/snippets/go-ts-mode/func
  # -*- mode: snippet -*-
  # name: funcObj
  # key: func
  # --
  /* $4 ${8:ToDo: Add documentation}
  */
  func ${1:(${2:x} ${3:Type})} ${4:Name}(${5:param string}) ${6:error} {
       $0
       ${7:$$(concat "return " (go-ts-get-initialised-return-types))}
  }

#+end_src

******* If Err
#+begin_src conf :tangle ~/.config/emacs/snippets/go-ts-mode/ife
  # -*- mode: snippet -*-
  # name: If Err
  # key: ife
  # type: command
  # --
  (let ((yas-good-grace nil))
    (yas-expand-snippet
      (concat "if ${1:err} != nil {\n"
              "\t$0\n"
              "\t${2:return "
              (go-ts-get-initialised-return-types 3 nil t)
              "}\n"
              "}\n")))
#+end_src

******* Return statement
#+begin_src conf :tangle ~/.config/emacs/snippets/go-ts-mode/return
  # -*- mode: snippet -*-
  # name: return with initialised values
  # key: ret
  # type: command
  # --
  (yas-expand-snippet (concat "return " (go-ts-get-initialised-return-types 1 nil nil)))
#+end_src

******* Struct Field
#+begin_src conf :tangle ~/.config/emacs/snippets/go-mode/structField
    # -*- mode: snippet -*-
    # name: Struct Field with optional Field Tag
    # key: field
    # --
    ${1:fieldName} ${2:Type}$0
#+end_src

******* TestFunc
#+begin_src emacs-lisp :tangle ~/.config/emacs/snippets/go-mode/test
  # key: test
  # --
  func Test${1:XXX}(t *testing.T) {
         $0
  }
#+end_src
******* Convey Top level
#+begin_src emacs-lisp :tangle ~/.config/emacs/snippets/go-mode/conveyt
  # key: ConveyT
  # --
  Convey("${1:Description}", t, func() {
         $0
  })
#+end_src
******* Convey
#+begin_src emacs-lisp :tangle ~/.config/emacs/snippets/go-mode/convey
  # key: Convey
  # --
  Convey("${1:Description}", func() {
         $0
  })
#+end_src
*** Yaml
**** Install yaml-mode

#+begin_src emacs-lisp
  (use-package yaml-mode
    :ensure t
    :config
    (add-to-list 'auto-mode-alist '("\\.yml\\'" .yaml-mode)))
#+end_src

*** Org
A lot of this Ricing is lifted from  [[https://lucidmanager.org/productivity/ricing-org-mode/][Lucid Manager]].
**** Install latest org and configure
Org is installed by default, but this makes sure we're on the latest version. Also =use-package= helps eep the config tidy
#+begin_src emacs-lisp
  (use-package org
    :ensure org-contrib
    :config
    (setq org-startup-indented t
          org-pretty-entities t
          org-hide-emphasis-markers t
          org-startuph-inline-images t
          line-spacing 6
          org-agenda-files '(
                             "~/org/Tasks.org"
                             )
          org-image-actual-width '(900))
    )
  (dolist (ele org-agenda-files)
    (unless (file-exists-p (file-name-directory ele))
    (make-directory (file-name-directory ele))))

#+end_src
**** Org Roam
[[https://orgroam.com][Org-Roam]] is note editing software extension for orgmode
#+begin_src emacs-lisp
  (use-package org-roam
    :ensure t
    :init
    (setq org-roam-v2-ack t)
    :custom
    (org-roam-directory "~/RoamNotes")
    (org-roam-completion-everywhere t)
    :bind (("C-c n l" . org-roam-buffer-toggle)
           ("C-c n f" . org-roam-node-find)
           ("C-c n i" . org-roam-node-insert)
           :map org-mode-map
           ("C-M-i" . completion-at-point)
           :map org-roam-dailies-map
           ("Y" . org-roam-dailies-capture-yesterday)
           ("T" . org-roam-dailies-capture-tomorrow))
    :bind-keymap
    ("C-c n d" . org-roam-dailies-map)
    :config
    (require 'org-roam-dailies)
    (org-roam-setup))
#+end_src
**** Nice Bullets
[[https://github.com/integral-dw/org-superstar-mode][Org-superstar]] will make bullets and lists much nicer to look at

#+begin_src emacs-lisp :tangle no
  (use-package org-superstar
  :config
  (setq org-superstar-special-todo-items t)
  (add-hook 'org-mode-hook (lambda ()
			     (org-superstar-mode 1))))
#+end_src

but I am experimenting with [[https://github.com/minad/org-modern][org-modern]] now

#+begin_src emacs-lisp
  (use-package org-modern
  :config
  (modify-all-frames-parameters
   '((right-divider-width . 10)
     (internal-border-width . 10)))
  (dolist (face '(window-divider
                  window-divider-first-pixel
                  window-divider-last-pixel))
    (face-spec-reset-face face)
    (set-face-foreground face (face-attribute 'default :background)))
  (set-face-background 'fringe (face-attribute 'default :background))

  (setq
   ;; Edit Settings
   org-auto-align-tags nil
   org-tags-column 0
   org-catch-invisible-edits 'show-and-error
   org-special-ctrl-a/e t
   org-insert-heading-respect-content t

   ;; Org styling
   org-hide-emphasis-markers t
   org-pretty-entities t

   ;; Agenda Styling
   org-agenda-tags-column 0
   org-agenda-block-separator ?-
   org-agenda-time-grid
   '((daily today require-timed)
     (800 1000 1200 1400 1600 1800 2000)
     " âââââ " "âââââââââââââââ")
   org-agenda-current-time-string
   "âââ now âââââââââââââââââââââââââââââââââââââââââââââââââ")

  ;;
  (setq org-ellipsis "â¦")
  (set-face-attribute 'org-ellipsis nil :inherit 'default :box nil)
  (global-org-modern-mode))

#+end_src

**** Use mixed-pitch package
The [[https://gitlab.com/jabranham/mixed-pitch][mixed pitch package]], by Alex Branham, allows seperation of variable and fixed width configs
#+begin_src emacs-lisp
  (use-package mixed-pitch
  :hook (text-mode . mixed-pitch-mode)
  :config
  (peteches/sys-exe darwin (
                              (set-face-attribute 'default nil :font "PT Mono" :height 130)
                              (set-face-attribute 'fixed-pitch nil :font "PT Mono")
                              (set-face-attribute variable-pitch nil :font "Georgia")))
  (peteches/sys-exe "gnu/linux" (
                                 (set-face-attribute default nil :font "Iosevka" :height 230)
                                 (set-face-attribute 'org-modern-symbol nil :family "Iosevka")
                                 (set-face-attribute 'variable-pitch nil :font "Iosevka Aile"))))
  (add-hook 'mixed-pitch-mode #'solaire-mode-reset)
#+end_src
**** Use a postframe for company mode
Some dropdowns get screwed up by variable width fonts [[https://github.com/tumashu/company-posframe][company-posframe]] this *should* fix that.
#+begin_src emacs-lisp
  (use-package company-posframe
    :config
    (company-posframe-mode 1))
#+end_src
**** Olivetti provides distraction free env
#+begin_src emacs-lisp
  (use-package olivetti
    :init
    (setq olivetti-body-width .67)
    :config
    (defun distraction-free ()
      "Distraction-free writing environment"
      (interactive)
      (if (equal olivetti-mode nil)
	  (progn
	    (window-configuration-to-register 1)
	    (delete-other-windows)
	    (text-scale-increase 2)
	    (olivetti-mode t))
	(progn
	  (jump-to-register 1)
	  (olivetti-mode 0)
	  (text-scale-decrease 2))))
    :bind
    (("<f9>" . distraction-free)))
    #+end_src
**** Template languages
Define more structure languages snippets
#+begin_src emacs-lisp
  (with-eval-after-load 'org
  (require 'org-tempo)
  (add-to-list 'org-structure-template-alist '("el". "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("conf" . "src conf"))
  (add-to-list 'org-structure-template-alist '("sh" . "src bash"))
  (add-to-list 'org-structure-template-alist '("zsh" . "src zsh"))
  (add-to-list 'org-structure-template-alist '("py". "src python"))
  (add-to-list 'org-structure-template-alist '("la". "export latex")))
#+end_src

Add ox-extra
#+begin_src emacs-lisp
  (use-package ox-extra
    :ensure nil
    :config
    (ox-extras-activate '(latex-header-blocks ignore-headlines)))

#+end_src

***** External packages
****** Golang
#+begin_src emacs-lisp
    (use-package ob-go
      :config
      (add-to-list 'org-structure-template-alist '("go" . "src go :imports '()")))
#+end_src
****** Mermaid
#+begin_src emacs-lisp
  (use-package ob-mermaid
    :config
    (add-to-list 'org-structure-template-alist '("mmd" . "src mermaid :file ./mermaid.png")))
#+end_src
****** CSS
#+begin_src emacs-lisp
  (add-to-list 'org-structure-template-alist '("css" . "src css"))
#+end_src
*****  load languages
Add Babel language support this is done after installing external packages so dependencies exist
#+begin_src emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (shell . t)
     (go . t)
     (mermaid . t)
     (python . t)))
   (setq org-confirm-babel-evaluate nil)
#+end_src
****** Latex
need to set the pdflatex dir if it's not in PATH
#+begin_src emacs-lisp
  (setq peteches/pdflatex ""
      peteches/pdflatexcmd (concat
                            peteches/pdflatex
                            " -interaction nonstopmode -output-directory %o %f"
                                   ))
#+end_src

To make nice pdf's from latex.
#+begin_src emacs-lisp
  (use-package ox-latex
    :ensure nil
    :config
    (peteches/sys-exe darwin
                  (setq org-latex-pdf-process
                        '("/usr/local/texlive/2022/bin/universal-darwin/pdflatex -interaction nonstopmode -output-directory %o %f"
                          "/usr/local/texlive/2022/bin/universal-darwin/pdflatex -interaction nonstopmode -output-directory %o %f"
                          "/usr/local/texlive/2022/bin/universal-darwin/pdflatex -interaction nonstopmode -output-directory %o %f")
                        ))
    (setq org-latex-with-hyperref nil
          org-latex-logfiles-extensions
          (quote ("lof" "lot" "tex~" "aux" "idx" "log" "out" "toc" "nav"
                  "snm" "vrb" "dvi" "fdb_latexmk" "blg" "brf" "fls" "entoc"
                  "ps" "spl" "bbl" "xmpi" "run.xml" "bcf" "acn" "acr" "alg"
                  "glg" "gls" "ist")))
    (unless (boundp 'org-latex-classes)
      (setq org-latex-classes nil)))
#+end_src
**** Auto tangle config
This snippet adds a hook to =org-mode= buffers so that =efs/org-babel-tangle-config= gets executed each time such a buffer gets saved. This function checks to see if the file being saved is the Emacs.org file youâre looking at right now, and if so, automatically exports the configuration here to the associated output files.
#+begin_src emacs-lisp
  ;; Automatically tangle our Emacs.org config file when we save it
  (defun peteches/org-babel-tangle-config ()
    (when (string-match  "OrgModeConfigs\\(.git\\)?/.*\\.org$" (buffer-file-name))
      ;; Dynamic scoping to the rescue
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'peteches/org-babel-tangle-config)))
#+end_src

** Add Terminal Emulations
*** Vterm
[[https://github.com/akermu/emacs-libvterm][Vterm]] is a compiled terminal emulator for emacs that is faster than eshell.
#+begin_src emacs-lisp
  (use-package vterm
    :custom
    (setq vterm-max-scrollback 100000)
    :bind
   ("C-c t" . vterm-other-window))
#+end_src

** Project navigations

f*** Use projectile to help navigate projects
#+begin_src emacs-lisp
      (use-package projectile
        :diminish projectile-mode
        :config
        (projectile-mode)
        (projectile-register-project-type 'golang '("go.mod" "go.sum")
                                          :project-file "go.mod"
                                          :compile "go build"
                                          :test "go test ./..."
                                          :run "go run"
                                          :test-suffix "_test.go")
        (add-to-list 'projectile-project-root-files "go.mod")
        (setq projectile-project-search-path '(("~/area_51/" . 10)))
        (setq projectile-indexing-method 'alien)
        (setq projectile-generic-command '"fd --print0 --type file")

        :custom
        (projectile-completion-system 'ivy)

        :bind-keymap
        ("C-c p" . projectile-command-map))

#+end_src

*** Also integrate with counsel
#+begin_src emacs-lisp
(use-package counsel-projectile
  :config (counsel-projectile-mode))
#+end_src

** Magit Awesome Git porcelain
Magit https://magit.vc is a nice git porcelain inside emacs
*** Install Packages
#+begin_src emacs-lisp :eval yes
       (use-package magit)
       (use-package forge
         :after magit
         :custom
         (auth-sources `("~/.authinfo.gpg")))
#+end_src
*** GPG signing commits requires emacs act as pinentry
#+begin_src emacs-lisp :tangle no
(setq epg-pinentry-mode 'loopback)
#+end_src
** Pass
[[https://www.passwordstore.org/][The Unix Password Store]] integrates with emacs out of the box!
#+begin_src emacs-lisp
  (use-package auth-source-pass
  :ensure t
  :config
  (auth-source-pass-enable)
  )
#+end_src

#+begin_src emacs-lisp
  (use-package pass)

#+end_src

** Email
*** Setup Mail Sync
**** Install dependencies
***** MacOsx
#+begin_src bash :tangle no
brew install isync mu
#+end_src
***** Gentoo
#+begin_src bash
emerge net-mail/mu net-mail/isync
#+end_src


**** Create mbsync config
First need to sync mail, Using mb sync, RC Config ezample
#+begin_src conf :tangle ~/.mbsyncrc :results nil
  IMAPAccount fastmail
  Host imap.fastmail.com
  User pete@peteches.co.uk
  PassCmd "pass imap.fastmail.com:993/pete@peteches.co.uk"
  SSLType IMAPS
  AuthMechs LOGIN

  IMAPStore fastmail-remote
  Account fastmail

  MaildirStore fastmail-local
  Subfolders Verbatim
  Path ~/Mail/peteches.co.uk/
  Inbox ~/Mail/peteches.co.uk/Inbox

  Channel fastmail
  Far :fastmail-remote:
  Near :fastmail-local:
  Patterns * !Inbox/L1
  Expunge None
  CopyArrivalDate yes
  Sync All
  Create Both
  SyncState *
#+end_src

****  Run initial sync
Then sync mail by running:
#+begin_src bash :tangle no :results none
  mkdir -p ~/Mail/peteches.co.uk
  mbsync -a
#+end_src

**** Index mail
Need to index mail by running the below:
#+begin_src bash :tangle no :results none
mu init --muhome ~/Mail/.mu-cache -m ~/Mail/ "--my-address=/.*@peteches.co.uk$/"
mu index --muhome ~/Mail/.mu-cache
#+end_src

*** Configure Emacs

**** Install mu4e
#+begin_src emacs-lisp :tangle no
  (use-package mu4e
    :ensure nil
    ; This should probably only be used for Mac systems, but it doesn't hurt to include it for non-mac systems
    :load-path "/usr/local/Cellar/mu/1.8.13/share/emacs/site-lisp/mu/mu4e"
    :config
    (peteches/sys-exe darwin
      (setq mu4e-mu-binary (directory-files-recursively "/usr/local/Cellar" "^mu$")))
    (setq mail-user-agent 'mu4e-user-agent
          mu4e-change-filenames-when-moving t
          mu4e-update-interval (* 10 60)
          mu4e-get-mail-command "mbsync -a"
          mu4e-maildir "/home/peteches/Mail"

          mu4e-mu-home "/home/peteches/Mail/.mu-cache"

          mu4e-contexts (list
                         ;; Personal
                         (make-mu4e-context
                          :name "Personal"
                          :match-func
                          (lambda (msg)
                            (when msg
                              (string-prefix-p "/peteches.co.uk" (mu4e-message-field msg :maildir))))
                          :vars '(
                                  (user-full-name . "Pete McCabe")
                                  (user-mail-address . "pete@peteches.co.uk")

                                  (message-send-mail-function . smtpmail-send-it)
                                  (smtpmail-smtp-user . "pete@peteches.co.uk")
                                  (smtpmail-smtp-server  . "smtp.fastmail.com")
                                  (smtpmail-smtp-service . 465)
                                  (smtpmail-stream-type  . ssl)
                                  (mu4e-drafts-folder . "/peteches.co.uk/Drafts")
                                  (mu4e-sent-folder . "/peteches.co.uk/Sent")
                                  (mu4e-refile-folder . "/peteches.co.uk/Archive")
                                  (mu4e-trash-folder . "/peteches.co.uk/Bin")
                                  (org-msg-signature . "

  Regards,

  ,#+begin_signature
  --
  ,*Pete*
  ,#+end_signature")
                                  ))
                         )

          mu4e-maildir-shortcuts
          '(("/peteches.co.uk/Inbox"     . ?i)
            ("/peteches.co.uk/Sent"      . ?s)
            ("/peteches.co.uk/Drafts"    . ?d)
            ("/peteches.co.uk/Bin"       . ?b)))

    (dolist (ele '(
                 "peteches.co.uk/Archive"
                 "peteches.co.uk/Bin"
                 "peteches.co.uk/Drafts"
                 "peteches.co.uk/Inbox"
                 "peteches.co.uk/Sent"
                 "peteches.co.uk/Spam"
                 "peteches.co.uk/Trash"
                 "peteches.co.uk/test"
                  ))
      (make-directory (expand-file-name ele "~/Mail") "true"))

    (setq mu4e-context-policy 'pick-first)
    (mu4e t)
    )

#+end_src
**** Install OrgMsg
[[https://github.com/jeremy-compostella/org-msg][Org-msg]] is an emacs minor mode for composing email. It harnesses some org-mode things.
#+begin_src emacs-lisp
  (use-package org-msg
    :config
    (setq org-msg-options "html-postamble:nil H:5 num:nil ^:{} toc:nil author:nil email:nil \\n:t"
          org-msg-startup "hidestars indent inlineimages"
          org-msg-greeting-fmt "\nHi%s,\n\n"
          org-msg-greeting-name-limit 3
          org-msg-default-alternatives '((new		. (text html))
                                         (reply-to-html	. (text html))
                                         (reply-to-text	. (text)))
          org-msg-convert-citation t)
    (org-msg-mode))
#+end_src

** Calendar
#+begin_src emacs-lisp :tangle no
  (use-package org-caldav
    :init
    ;; This is the sync on close function; it also prompts for save after syncing so
    ;; no late changes get lost
    (defun org-caldav-sync-at-close ()
      (org-caldav-sync)
      (save-some-buffers))

    ;; This is the delayed sync function; it waits until emacs has been idle for
    ;; "secs" seconds before syncing.  The delay is important because the caldav-sync
    ;; can take five or ten seconds, which would be painful if it did that right at save.
    ;; This way it just waits until you've been idle for a while to avoid disturbing
    ;; the user.
    (defvar org-caldav-sync-timer nil
       "Timer that `org-caldav-push-timer' used to reschedule itself, or nil.")
    (defun org-caldav-sync-with-delay (secs)
      (when org-caldav-sync-timer
        (cancel-timer org-caldav-sync-timer))
      (setq org-caldav-sync-timer
            (run-with-idle-timer
             (* 1 secs) nil 'org-caldav-sync)))


    (make-directory "~/Calendars/backups" "true")
    ;; Actual calendar configuration edit this to meet your specific needs
    (setq
     org-caldav-debug-level 2
          org-caldav-backup-file "~/Calendars/backups/org-caldav-backup.org"
          org-caldav-save-directory "~/Calendars/backups/")

    (setq org-caldav-calendars nil)
    (add-to-list 'org-caldav-calendars
                 '(:calendar-id "781e7edc-67ff-4ab4-babe-98349544019f"
                   :url "https://caldav.fastmail.com/dav/calendars/user/pete@peteches.co.uk/"
                   :inbox "~/Calendars/pete@peteches.co.uk.org"
                   ))
    (add-to-list 'org-agenda-files "~/Calendars/pete@peteches.co.uk.org")

    :config
    (setq org-icalendar-alarm-time 1
          ;; This makes sure to-do items as a category can show up on the calendar
          org-icalendar-include-todo t
          ;; This ensures all org "deadlines" show up, and show up as due dates
          org-icalendar-use-deadline '(event-if-todo event-if-not-todo todo-due)
          ;; This ensures "scheduled" org items show up, and show up as start times
          org-icalendar-use-scheduled '(todo-start event-if-todo event-if-not-todo))

    ;; Add the delayed save hook with a five minute idle timer
    (add-hook 'after-save-hook
              (lambda ()
                (when (eq major-mode 'org-mode)
                  (org-caldav-sync-with-delay 300))))

    ;; Add the close emacs hook
    (add-hook 'kill-emacs-hook 'org-caldav-sync-at-close))
#+end_src

** BugTracker
Emacs has a bug tracking package! how cool!
#+begin_src emacs-lisp
(use-package debbugs)
#+end_src


* Systemd units

** User Service
#+begin_src conf :mkdirp yes :tangle ~/.config/systemd/user/emacs.service
  [Unit]
  Description=Emacs text editor
  Documentation=info:emacs man:emacs(1) https://gnu.org/software/emacs/

  [Service]
  Type=notify
  ExecStart=/usr/bin/emacs --fg-daemon

  # Emacs will exit with status 15 after having received SIGTERM, which
  # is the default "KillSignal" value systemd uses to stop services.
  SuccessExitStatus=15

  # The location of the SSH auth socket varies by distribution, and some
  # set it from PAM, so don't override by default.
  # Environment=SSH_AUTH_SOCK=%t/keyring/ssh
  Restart=on-failure

  [Install]
  WantedBy=default.target
#+end_src

#+begin_src bash :eval yes
  systemctl --user enable --now emacs.service
#+end_src


** Reload config when changes
This watches for changes to the config file
#+begin_src conf :mkdirp yes :tangle ~/.config/systemd/user/emacsConfigWatcher.path
  [Unit]
  Description=Watches the emacs config file for changes and triggers restart of the deamon.

  [Path]
  PathModified=%h/.config/emacs/init.el
  Unit=ReloadEmacsConfig.service

  [Install]
  WantedBy=default.target

#+end_src

And triggers this to tell emacs to reload config
#+begin_src conf :mkdirp yes :tangle ~/.config/systemd/user/ReloadEmacsConfig.service
  [Unit]
  Description=Reloads the emacs config in the service

  [Service]
  Type=oneshot
  ExecStart=emacsclient --eval '(load-file "~/.config/emacs/init.el")'

  [Install]
  WantedBy=defaul.target

#+end_src

#+begin_src bash :eval yes :tangle no
  systemctl --user daemon-reload
  systemctl --user enable emacsConfigWatcher.path
#+end_src
